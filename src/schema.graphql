type Task {
  id: ID!
  createdAt: DateTime!
  updateAt: DateTime!
  deletedAt: DateTime
  text: String!
  done: Boolean!
  dueDate: DateTime
  createdBy: User!
  subRequest: SubRequest!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type SubRequest {
  id: ID!
  createdAt: DateTime!
  updateAt: DateTime!
  deletedAt: DateTime
  title: String!
  request: Request!
  createdBy: User!
  tasks: [Task!]!
}

type Request {
  id: ID!
  createdAt: DateTime!
  updateAt: DateTime!
  deletedAt: DateTime
  title: String!
  description: String
  dueDate: DateTime
  endDate: DateTime
  list: List!
  createdBy: User!
  subRequests: [SubRequest!]!
}

type List {
  id: ID!
  createdAt: DateTime!
  updateAt: DateTime!
  deletedAt: DateTime
  title: String!
  project: Project!
  createdBy: User!
  requests: [Request!]!
}

type Project {
  id: ID!
  createdAt: DateTime!
  updateAt: DateTime!
  deletedAt: DateTime
  title: String!
  client: Client!
  createdBy: User!
  lists: [List!]!
}

type Client {
  id: ID!
  createdAt: DateTime!
  updateAt: DateTime!
  deletedAt: DateTime
  name: String!
  email: String!
  nit: String
  createdBy: User!
  projects: [Project!]!
}

type User {
  id: ID!
  createdAt: DateTime!
  updateAt: DateTime!
  deletedAt: DateTime
  username: String!
  email: String!
  roles: [UserRoles!]!
  lastUpdatedBy: User
}

"""Valid roles for users"""
enum UserRoles {
  admin
  user
}

type Query {
  users(roles: [UserRoles!] = [], offset: Int = 0, limit: Int = 10, search: String): [User!]!
  user(id: ID!): User!
  clients(offset: Int = 0, limit: Int = 10, search: String): [Client!]!
  client(id: ID!): Client!
  projects(offset: Int = 0, limit: Int = 10, search: String): [Project!]!
  project(id: ID!): Project!
  lists(offset: Int = 0, limit: Int = 10, search: String): [List!]!
  list(id: ID!): List!
  requests(offset: Int = 0, limit: Int = 10, search: String): [Request!]!
  request(id: ID!): Request!
  subRequests(offset: Int = 0, limit: Int = 10, search: String): [SubRequest!]!
  subRequest(id: ID!): SubRequest!
  tasks(offset: Int = 0, limit: Int = 10, search: String): [Task!]!
  task(id: ID!): Task!
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(id: ID!): User!
  createClient(createClientInput: CreateClientInput!): Client!
  updateClient(updateClientInput: UpdateClientInput!): Client!
  removeClient(id: ID!): Client!
  createProject(createProjectInput: CreateProjectInput!): Project!
  updateProject(updateProjectInput: UpdateProjectInput!): Project!
  removeProject(id: ID!): Project!
  createList(createListInput: CreateListInput!): List!
  updateList(updateListInput: UpdateListInput!): List!
  removeList(id: ID!): List!
  createRequest(createRequestInput: CreateRequestInput!): Request!
  updateRequest(updateRequestInput: UpdateRequestInput!): Request!
  removeRequest(id: ID!): Request!
  createSubRequest(createSubRequestInput: CreateSubRequestInput!): SubRequest!
  updateSubRequest(updateSubRequestInput: UpdateSubRequestInput!): SubRequest!
  removeSubRequest(id: ID!): SubRequest!
  createTask(createTaskInput: CreateTaskInput!): Task!
  updateTask(updateTaskInput: UpdateTaskInput!): Task!
  removeTask(id: ID!): Task!
}

input CreateUserInput {
  """User username"""
  username: String!

  """User email"""
  email: String!

  """User password"""
  password: String!

  """Roles that the user can have"""
  roles: [UserRoles!] = [user]
}

input UpdateUserInput {
  """User username"""
  username: String

  """User email"""
  email: String

  """User password"""
  password: String
  roles: [UserRoles!] = [user]
  id: ID!
  deletedAt: DateTime
}

input CreateClientInput {
  name: String!
  email: String!
  nit: String
}

input UpdateClientInput {
  name: String
  email: String
  nit: String
  id: ID!
}

input CreateProjectInput {
  title: String!
  clientId: ID!
}

input UpdateProjectInput {
  title: String
  clientId: ID
  id: ID!
}

input CreateListInput {
  title: String!
  projectId: ID!
}

input UpdateListInput {
  title: String
  projectId: ID
  id: ID!
}

input CreateRequestInput {
  title: String!
  listId: ID!
  description: String
  dueDate: DateTime
  endDate: DateTime
}

input UpdateRequestInput {
  title: String
  listId: ID
  description: String
  dueDate: DateTime
  endDate: DateTime
  id: ID!
}

input CreateSubRequestInput {
  title: String!
  requestId: ID!
}

input UpdateSubRequestInput {
  title: String
  requestId: ID
  id: ID!
}

input CreateTaskInput {
  text: String!
  done: Boolean = false
  dueDate: DateTime
  subRequestId: ID!
}

input UpdateTaskInput {
  text: String
  done: Boolean = false
  dueDate: DateTime
  subRequestId: ID
  id: ID!
}
